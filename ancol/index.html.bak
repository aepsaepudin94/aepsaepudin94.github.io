<!DOCTYPE html>
<html>
    <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <meta name="apple-mobile-web-app-capable" content="yes">
        <title>My Maps</title>
        <link rel="stylesheet" href="http://dev.openlayers.org/theme/default/style.css" type="text/css">
        <style type="text/css">
            html, body, #map {
                height: 100%;
                width: 100%;
            }
            body {
                margin: 0;
            }
        </style>
    </head>
    <body>
        <div id="map"></div>
        <script src="jquery.min.js"></script>
        <script src="http://maps.google.com/maps/api/js?v=3"></script>
        <script src="http://dev.openlayers.org/OpenLayers.js"></script>
        <script src="main.js"></script>
        <script type="text/javascript">
            var map;
            var epsg900913 = new OpenLayers.Projection("EPSG:900913");
            var epsg4326 = new OpenLayers.Projection("EPSG:4326");
            var longitude, latitude;
            var markers, marker, pointLayer, pointObj;

            var createLongLat = function(long, lat) {
                var longlat = new OpenLayers.LonLat(long, lat);
                var transformedLongLat = longlat.transform(epsg4326, epsg900913);
                return transformedLongLat;
            };

            function createGeometryPoint (lon, lat) {
                var pt = new OpenLayers.Geometry.Point(lon, lat);
                return pt.transform(epsg4326, epsg900913);
            }

            var layerMarkerStyle = new OpenLayers.StyleMap({
                "default": new OpenLayers.Style ({
                    externalGraphic: "${iconPath}",
                    graphicWidth:    "${iconWidth}",
                    graphicHeight:   "${iconHeight}",
                    graphicXOffset:  "${iconXOffset}",
                    graphicYOffset:  "${iconYOffset}",
                    rotation:        "${iconAngle}",
                    FillOpacity:     "${iconOpacity}",
                    labelBorderSize: "1px"
                })
            });

            var styleLine = new OpenLayers.StyleMap({
                'default': new OpenLayers.Style({
                    'fillColor':         '#ff1a1a',
                    'fillOpacity':       '1',
                    'strokeColor':       '#00ff00',
                    'strokeOpacity':     '1',
                    'strokeWidth':       '3',
                    'fontSize':          '10pt',
                    'fontFamily':        'Arial',
                    'label':             ' ',
                    'fontOpacity':       '1',
                    'labelOutlineColor': "white",
                    'labelOutlineWidth': "1",
                    'fontWeight':        "bold"
                })
            });

            var stylePoint = new OpenLayers.StyleMap({
            'default' : new OpenLayers.Style({
                'fillColor':     '#ff8000',
                'fillOpacity':   '2',
                'strokeColor':   '#0000ff',
                'strokeOpacity': '1',
                'strokeWidth':   '2',
                'pointRadius':   4
                })
            });

            function createMarker(data, lon, lat)  {
                var point = createGeometryPoint(lon, lat);
                return new OpenLayers.Feature.Vector(point, {
                    iconPath:        data.iconLocation,
                    iconWidth:       data.width,
                    iconHeight:      data.height,
                    iconXOffset:     data.xOffset,
                    iconYOffset:     data.yOffset,
                    iconAngle:       0,
                    iconOpacity:     1
                });
            }

            function createPoint(data, lon, lat) {
                var point = createGeometryPoint(lon, lat);
                return new OpenLayers.Feature.Vector(point, {
                    fillColor : data.fillColor,
                    fillOpacity : data.fillOpacity,
                    strokeColor : data.strokeColor,
                    strokeOpacity : data.strokeOpacity
                });
            }

            var haltePositions = [
                {lat:-6.19397, lon:106.84926},
                {lat:-6.19529, lon:106.84992},
                {lat:-6.19537, lon:106.8498},
                {lat:-6.1902, lon:106.84702},
                {lat:-6.18943, lon:106.84656},
                {lat:-6.18912, lon:106.84641},
                {lat:-6.18761, lon:106.84556},
                {lat:-6.18718, lon:106.84529},
                {lat:-6.18673, lon:106.84507},
                {lat:-6.18423, lon:106.84378},
            ];

            var deviceID = '2000350034';
            var pid = '';
            var gmt_date = '';
            var head, speed, deviceName, driverName, dateTime, roadName, ignitionStatus;
            var lineObj;

            var init = function (haltePos) {
                var latlon = {lat:-6.169616, lon:106.803786};
                var long = latlon.lon;
                var lat = latlon.lat;

                var options = {
                    projection: epsg900913,
                    displayProjection: epsg4326,
                    center : createLongLat(long, lat),
                    zoom : 4
                };
                map = new OpenLayers.Map("map", options);

                var gmap = new OpenLayers.Layer.Google("Google Streets", {
                    'numZoomLevels' : 20,
                });
                var osm = new OpenLayers.Layer.OSM("OSM", {visibility: false});

                // note that first layer must be visible
                map.addLayers([gmap, osm]);
                map.addControl(new OpenLayers.Control.LayerSwitcher());

                markers = new OpenLayers.Layer.Vector("Markers", {
                    styleMap: layerMarkerStyle
                });
                // map.zoomToMaxExtent();

                lineLayer = new OpenLayers.Layer.Vector("lineLayer", {
                    styleMap: styleLine
                });

                //Create point layer
                pointLayer = new OpenLayers.Layer.Vector("pointLayer", {
                    stylePLayer: stylePoint
                });

                // Add layer
                map.addLayer(lineLayer);
                map.addLayer(pointLayer);
                map.addLayer(markers);

                for (var i = 0; i < haltePositions.length; i++) {
                    var halteMarker = createMarker({
                    iconLocation: 'bus_stop2.png',
                    width: 25,
                    height: 25,
                    xOffset: 25 / -2,
                    yOffset: 25/-2,
                    }, haltePositions[i].lon, haltePositions[i].lat);
                    markers.addFeatures([halteMarker]);
                }
            }

            var drawMarker = function(long, lat, aHead) {
                marker = createMarker({
                    iconLocation: 'car.png',
                    width: 15,
                    height: 32,
                    xOffset: 15 / -2,
                    yOffset: 32/-2,
                }, long, lat);
                markers.addFeatures([marker]);
                marker.attributes.iconAngle = aHead;
            }

            init(haltePositions);

            var getPosition = function (callback) {
                var postData = {
                    devices: [
                        {
                            id: deviceID
                        }
                    ]
                };

                if (pid && gmt_date) {
                    postData['devices'][0]['pid'] = pid;
                    postData['devices'][0]['gmt_date'] = gmt_date;
                }

                getAPI('positions', 'realtime', postData, function (respon) {
                    var data = respon.data.data;
                    var data_return = [];
                    if (data) {
                        if (data[deviceID]) {
                            data_return = data[deviceID];
                            
                            var data_length = data[deviceID].length;
                            if (data_length) {
                                var lastData = data[deviceID][data_length-1];

                                pid = lastData.id;
                                gmt_date = lastData.adatetime;
                                head = lastData.ahead;
                                speed = lastData.aspeed;
                                deviceName = lastData.device_name;
                                driverName = lastData.driver_name;
                                dateTime = lastData.ldatetime;
                                roadName = lastData.roadname;
                                ignitionStatus = lastData.ignition_status;
                            }
                        }
                    }

                    if (typeof callback === 'function') {
                        callback(data_return);
                    }
                });
            }

            function addMarkerPopup(respon) {
                firstPosistion = respon;
                if (firstPosistion.length) {
                    var lon = firstPosistion[0].along;
                    var lat = firstPosistion[0].alat;
                    var longlat = new createLongLat(lon, lat);

                    var popupContentHTML = "<h3>"+deviceName + " " + driverName+"</h3>" + "<hr>" + "<br>"
                    + 'Local Date & Time : ' + dateTime + "<br>" + 'Roadname : ' + roadName + "<br>" + 'Ignation Status : ' +
                    ignitionStatus + "<br>" + 'Speed : ' + speed + "<br>" + 'Heading : ' + head;

                    var popup = new OpenLayers.Popup.FramedCloud("Popup", 
                        longlat, 
                        OpenLayers.Size(100, 100),
                        popupContentHTML, 
                        null,
                        false
                    );
                    map.addPopup(popup);
                    console.log(longlat);

                    // var clickMarker = function () {
                    //     // body...
                    // };

                    // markers.events.register("",);
                }
            }
            
            var fristMarkerLocation = function(respon) {
                firstPosistion = respon;
                if (firstPosistion.length) {
                    var lat = firstPosistion[0].alat;
                    var lon = firstPosistion[0].along;
                    var aHead = head;
                    drawMarker(lon, lat, aHead);
                    map.setCenter(createLongLat(lon, lat), 20, null, null);
                };
            }

            var createFirstLineString = function (respon) {
                var firstPosistion = respon;
                if (firstPosistion.length) {
                    var lat = firstPosistion[0].alat;
                    var lon = firstPosistion[0].along;
                    var pointLine = [createGeometryPoint(lon, lat)];

                    var lineString = new OpenLayers.Geometry.LineString(pointLine);
                    lineObj = new OpenLayers.Feature.Vector(lineString);
                    lineLayer.addFeatures([lineObj]);
                };
            }


            var drawPoint = function (lon, lat) {
                pointObj = createPoint({
                    fillColor : '#ff0000',
                    fillOpacity : 0.5,
                    strokeColor : '#ff0000',
                    strokeOpacity : 0.8
                }, lon, lat);
                if (speed < 20) {
                    pointLayer.addFeatures(pointObj);
                };
            };

            var createFirstPoint = function (respon) {
                var firstPosition = respon;
                if (firstPosition.length) {
                    var lat = firstPosition[0].alat;
                    var lon = firstPosition[0].along;
                    drawPoint(lon, lat);
                };
            }

            getPosition(function (data) {
                createFirstPoint(data);
                createFirstLineString(data);
                fristMarkerLocation(data);
                addMarkerPopup(data);
            });

            var moveObj = function (respon) {
                var nextPositions = respon;
                if (nextPositions.length) {
                    var lastIndex = nextPositions.length -1;
                    var lat = nextPositions[lastIndex].alat;
                    var lon = nextPositions[lastIndex].along;
                    var aHead = nextPositions[lastIndex].ahead;
                    map.setCenter(createLongLat(lon, lat), 20, null, null);
                    
                    // Move Marker
                    marker.attributes.iconAngle = aHead;
                    marker.move(createLongLat(lon, lat));
                    
                    //Create Line String
                    var geoPoint = createGeometryPoint(lon, lat);
                    lineObj.geometry.addPoint(geoPoint);
                    lineLayer.drawFeature(lineObj);
                    
                    //Create Point
                    drawPoint(lon, lat);
                    console.log(speed);
                    console.log("Device Name : ", deviceName, driverName, dateTime, roadName, ignitionStatus);
                }
            }

            setTimeout(function() {
                setInterval(function () {
                    getPosition(moveObj);
                }, 3000)
            }, 3000)

                // How to rotate and move marker
               /* var rotateMarker = function () {
                    marker.attributes.iconAngle += 10;
                    markers.redraw();
                    if(marker.attributes.iconAngle >= 360) {
                        marker.attributes.iconAngle = 0;
                    }
                    setTimeout(rotateMarker, 1e3);
                };
                setTimeout(rotateMarker, 1e3);*/

                /*var i = 0;
                var moveMarker = function () {
                    i++;
                    marker.move(createLongLat(positions[i].lon, positions[i].lat));
                    setTimeout(moveMarker, 1e3);
                };
                setTimeout(moveMarker, 1e3);*//*var i = 0;*/
        </script>
    </body>
    
</html>